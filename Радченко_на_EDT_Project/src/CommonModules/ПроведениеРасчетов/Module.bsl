Процедура РасчитатьНачисления(НаборЗаписейРегистра, ТребуемыйВидРасчета, СписокСотрудников) Экспорт
	
	Регистратор = НаборЗаписейРегистра.Отбор.Регистратор.Значение;
	
	// Расчитать первичные записи.
	Если ТребуемыйВидРасчета = ПланыВидовРасчета.ОсновныеНачисления.Оклад Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЕСТЬNULL(НачисленияДанныеГрафика.ЗначениеПериодДействия, 0) КАК Норма,
			|	ЕСТЬNULL(НачисленияДанныеГрафика.ЗначениеФактическийПериодДействия, 0) КАК Факт,
			|	НачисленияДанныеГрафика.НомерСтроки
			|ИЗ
			|	РегистрРасчета.Начисления.ДанныеГрафика(Регистратор = &Регистратор
			|	И ВидРасчета = &ВидРасчета
			|	И Сотрудник В (&СписокСотрудников)) КАК НачисленияДанныеГрафика";
		
		Запрос.УстановитьПараметр("ВидРасчета", ТребуемыйВидРасчета);
		Запрос.УстановитьПараметр("Регистратор", Регистратор);
		Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
		
		ВыборкаРезультата = Запрос.Выполнить().Выбрать();
		
		Для Каждого ЗаписьРегистра Из НаборЗаписейРегистра Цикл
			
			СтруктураНомер = Новый Структура("НомерСтроки");
			СтруктураНомер.НомерСтроки = ЗаписьРегистра.НомерСтроки;
			ВыборкаРезультата.Сбросить();
			
			Если ВыборкаРезультата.НайтиСледующий(СтруктураНомер) Тогда
				
				Если ВыборкаРезультата.Норма = 0 Тогда
					
					Сообщение = Новый СообщениеПользователю();
					Сообщение.Текст = "Вид расчета: Оклад - нет рабочих дней в заданном периоде";
					Сообщение.Сообщить();
					ЗаписьРегистра.Результат = 0;
					
				Иначе
				
					// Расчитать оклад по фактическому периоду и исходными данными
					ЗаписьРегистра.Результат = (ЗаписьРегистра.ИсходныеДанные / ВыборкаРезультата.Норма) * 
					ВыборкаРезультата.Факт;
					Сообщение = Новый СообщениеПользователю();
					Сообщение.Текст = "Выполнен расчет: " + ЗаписьРегистра.Регистратор + " - " +
						ЗаписьРегистра.ВидРасчета + " - " + ЗаписьРегистра.Сотрудник;
					Сообщение.Сообщить();
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТребуемыйВидРасчета = ПланыВидовРасчета.ОсновныеНачисления.Премия Тогда
	// Расчитать вторичные записи.
	
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	НачисленияБазаНачисления.РезультатБаза КАК База,
			|	НачисленияБазаНачисления.НомерСтроки
			|ИЗ
			|	РегистрРасчета.Начисления.БазаНачисления(&ИзмерениеОсновного, &ИзмерениеБазового,, Регистратор = &Регистратор
			|	И ВидРасчета = &ВидРасчета
			|	И Сотрудник В (&СписокСотрудников)) КАК НачисленияБазаНачисления";
		
		Измер = Новый Массив(1);
		Измер[0] = "Сотрудник";
		
		Запрос.УстановитьПараметр("ВидРасчета", ТребуемыйВидРасчета);
		Запрос.УстановитьПараметр("ИзмерениеОсновного", Измер);
		Запрос.УстановитьПараметр("ИзмерениеБазового", Измер);
		Запрос.УстановитьПараметр("Регистратор", Регистратор);
		Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
		
		ВыборкаРезультата = Запрос.Выполнить().Выбрать();
		
		Для Каждого ЗаписьРегистра Из НаборЗаписейРегистра Цикл
			
			СтруктураНомер = Новый Структура("НомерСтроки");
			СтруктураНомер.НомерСтроки = ЗаписьРегистра.НомерСтроки;
			ВыборкаРезультата.Сбросить();

			Если ВыборкаРезультата.НайтиСледующий(СтруктураНомер) Тогда
			
				ЗаписьРегистра.Результат = ВыборкаРезультата.База * (10 / 100);
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Выполнен расчет " + ЗаписьРегистра.Регистратор + " – " + 
					ЗаписьРегистра.ВидРасчета + " – " + ЗаписьРегистра.Сотрудник;
				Сообщение.Сообщить();

			КонецЕсли;
	
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерерассчитатьНачисления(ТребуемыйВидРасчета) Экспорт
	
	// Выбрать из набора записей перерасчета записи в следующей последовательности:
	// записи документа1 для сотрудников из списка,
	// записи документа2 для сотрудников из списка и т. д.

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленияПерерасчет.ОбъектПерерасчета КАК ОбъектПерерасчета,
		|	НачисленияПерерасчет.Сотрудник
		|ИЗ
		|	РегистрРасчета.Начисления.Перерасчет КАК НачисленияПерерасчет
		|ГДЕ
		|	НачисленияПерерасчет.ВидРасчета = &ВидРасчета
		|ИТОГИ
		|ПО
		|	ОбъектПерерасчета";
	
	Запрос.УстановитьПараметр("ВидРасчета", ТребуемыйВидРасчета);
	СписокСотрудников = Новый СписокЗначений;	
	
	// Перебрать группировку по регистратору.
	ВыборкаПоРегистратору = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоРегистратору.Следующий() Цикл
		
		Регистратор = ВыборкаПоРегистратору.ОбъектПерерасчета;
		
		// Перебрать группировку по сотрудникам для выбранного регистратора
		// и создать список сотрудников.
		ВыборкаПоСотрудникам  = ВыборкаПоРегистратору.Выбрать();
		СписокСотрудников.Очистить();	
		Пока ВыборкаПоСотрудникам.Следующий() Цикл
			СписокСотрудников.Добавить(ВыборкаПоСотрудникам.Сотрудник);
		КонецЦикла;
		
		// Получить набор записей регистра расчета для выбранного регистратора.
		НаборЗаписей = РегистрыРасчета.Начисления.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение = Регистратор;
		НаборЗаписей.Прочитать();
		
		//@skip-check query-in-loop
		РасчитатьНачисления(НаборЗаписей, ТребуемыйВидРасчета, СписокСотрудников);
		НаборЗаписей.Записать(, Истина);
		
		// Очистить перерассчитанные записи в перерасчете.
		НаборЗаписейПерерасчета = РегистрыРасчета.Начисления.Перерасчеты.Перерасчет.СоздатьНаборЗаписей();
		НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = Регистратор;
		НаборЗаписейПерерасчета.Записать();
		
	КонецЦикла;
	
		
КонецПроцедуры